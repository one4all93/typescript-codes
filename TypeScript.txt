✅ TypeScript란?
TypeScript = JavaScript + 타입 시스템

자바스크립트에 정적 타입 개념을 추가한 언어
에러를 코드 작성 시점에 미리 발견할 수 있게 도와줌
.ts 확장자를 사용하고, 결국 자바스크립트로 변환돼서 실행

🧠 왜 쓰는 거야?
🚨 에러 사전 방지	함수에 이상한 인자 넣었을 때 컴파일 단계에서 에러 잡아줌
🔍 자동완성 & 문서화	타입이 명확하니까 IDE가 똑똑해짐 (vscode에서 추천 짱짱)
🧑‍💻 협업에 유리	코드 읽는 사람도 “이 함수에 어떤 값이 들어가고, 나오는지” 한눈에 알 수 있음
🧩 리액트랑 찰떡	props, state 같은 것들 타입으로 명확하게 정의 가능

🧾 주요 타입 정리
타입	예시	설명
string	"hello"	문자열
number	42, 3.14	숫자
boolean	true, false	불린
null, undefined	null, undefined	널/정의되지 않음
any	any값	아무 타입이나 가능 (❗가급적 지양)
unknown	?	알 수 없는 타입 (any보다 안전)
void	함수 반환값이 없을 때	function sayHi(): void {}
never	절대 반환하지 않음	예: 에러 던지는 함수
object	{ name: string }	객체 타입

annotation : 타입 지정 해줌
type inference : 타입을 추론 함

변수 선언과 동시에 초기화는 타입 추론 가능 하지만, 나중에 초기화 해주면 추론 불가

🎯 특별한 타입들
1. 배열
let numbers: number[] = [1, 2, 3];
let names: string[] = ["Alice", "Bob"];

2. 튜플 (Tuple) → 길이/순서 고정된 배열
let person: [string, number] = ["Alice", 30];

3. 유니언 타입 (Union)
let value: string | number;
value = "hello";
value = 42;

4. 리터럴 타입
let direction: "left" | "right";
direction = "left"; // okay
direction = "up"; // ❌ 에러

🧩 함수에 타입 지정하기
function add(a: number, b: number): number {
  return a + b;
}

🧱 객체 타입 정의
type User = {
  name: string;
  age: number;
  isAdmin?: boolean; // 선택적 속성
};

const user: User = {
  name: "철수",
  age: 25,
};

🔁 타입스크립트에서 자주 보는 키워드
type	커스텀 타입 정의
interface	객체 구조 정의 (type과 비슷)
extends	상속 개념
as	타입 단언 (Type Assertion)
?	선택적 속성 (있어도 되고 없어도 됨)
readonly	읽기 전용 속성

🌟 실전 예시 (React Component)
type Props = {
  name: string;
  age: number;
  onClick: () => void;
};

function Profile({ name, age, onClick }: Props) {
  return <div onClick={onClick}>{name} ({age})</div>;
}
